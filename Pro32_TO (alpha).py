import sys
import requests
import config
from datetime import datetime

### add in these funcions round to th 2nd decimal
# round (hdd_free_space,2)
# round (hdd_size,2)
# round (ram_aviable,2)

sys.stdout.reconfigure(encoding='utf-8')


    # list containing all the IDs of the clients
agents = [
943874, 332575, 950280, 367918, 341651, 664067, 334234, 530474, 332543, 356761, 
331280, 325548, 331638, 333629, 332407, 333906, 333860, 337924, 339977, 333832, 
333855, 333842, 332455, 332257, 332388, 393879, 335452, 532215, 334224, 398783, 
332369, 334267, 346875, 577954, 325813, 325815, 331335, 325684, 823342, 404872, 
331478, 528112, 334194, 333944, 334043, 335022, 335028, 335032, 334147, 332594, 
325284, 331311, 864923, 864963, 864938, 325301, 332297, 334264, 332420, 332411, 
796173, 661948, 332781, 332398, 331371, 331353, 352222, 331593, 334137, 334142, 
607657, 902423, 1067849, 385218, 325665, 325223, 325229, 459420, 584586, 778622, 
594981, 339052, 542592, 994865, 613137, 893608, 331630, 331626, 1067864, 331052, 
472687, 825247, 1037963, 334126, 334119, 334121, 334124, 335130, 931336, 1067895, 
664073, 904717, 589299, 456909, 390492, 368440, 508971, 332486, 835869, 467583, 
325674, 325676, 1067907, 335280, 931099, 331528, 825870, 333002, 332790, 331718, 
331664, 328836, 331522, 325287, 743679, 743633, 827907, 325696, 325686, 325700, 
325437, 325414, 325402, 325595, 334232, 325698, 689100, 654174, 323701, 332567, 
332569, 332560, 332561, 331060, 332565, 902174, 532602, 508907, 332472, 332475, 
332534, 332537, 332551, 332554, 332558, 331656, 384348, 331070, 331072, 325582, 
832845, 330089, 330090, 1056241, 331735, 384863, 758281, 633535, 339110, 338979, 
633210, 330096, 330095, 710940, 419830, 1037795, 331079, 331082, 330052, 330098, 
330099, 331817, 331774, 330067, 330100, 330101, 330102, 330103, 330109, 330108, 
330111, 330105, 331087, 804458, 330106, 331388, 331698, 331704, 331498, 331749, 
331742, 331739, 331737, 331500, 858933, 331677, 331680, 331432, 737887, 331436, 
330066, 1049600, 730127, 331733, 331458, 331532, 331527, 443229, 331453, 331768, 
331765, 331663, 331667, 331658, 331654, 331506, 330054, 331462, 325228, 331623, 
331043, 325621, 325627, 505891, 686317, 325630, 325648, 918543, 992315, 335786, 
353119, 353074, 331472, 334237, 755609, 331609, 331612, 325660, 669536, 493832, 
713864, 747114, 388900, 381076, 367743, 325245, 683325, 765959, 801910, 332496, 
339812, 992420, 331420, 331423, 586974, 331424, 799505, 356774, 331330, 325374, 
325656, 334886, 334883, 610169, 334912, 334904, 334893, 714154, 753280, 347082, 
340415, 966692, 340412, 342872, 342873, 342874, 429731, 342868, 342864, 342866, 
421490, 1001536, 443922, 1006326, 1038300, 880880, 325380, 648669, 332738, 332743, 
819035, 332751, 334216, 334223, 498497, 667211, 332583, 689300, 711866, 1067875, 
766054, 334228, 334244, 503565, 331068, 325179, 873614, 874977, 331452, 325419, 
820798, 435339, 398118, 325458, 325462, 325445, 505832, 332584, 332593, 376093, 
333088, 586911, 331277, 862515, 997753, 714513, 741091, 803844, 740958, 741033, 
714500, 741079, 360439, 432326, 380877, 364285, 472833, 334046, 334130, 381066, 
383450, 325579, 457515, 335220, 335227, 335201, 335229, 335238, 335245, 335241, 
335255, 335258, 335263, 335202, 335243, 335203, 335265, 335206, 335218, 335250, 
335213, 842434, 335219, 356278, 843463, 325550, 332579, 332581, 383871, 383862, 
418598, 859369, 938900, 943980, 674821, 948946, 948933, 946393, 961312, 332876, 
332875, 334852, 663582, 332872, 1016235, 1016343,  331505, 331509, 396452, 388669, 
720102, 332833, 333059, 331717, 376833, 944246, 331620, 459490, 733634, 703972, 
331042, 328861, 722929, 366396, 1043844, 331642, 722943, 331635, 681150, 952429, 
331662, 1026272, 331672, 331676, 331678, 331685, 331690, 331692, 331703, 331693, 
403165, 403192, 529968, 325405, 425720, 923441, 843814, 470705, 470683, 470702, 
331614, 470399, 470824, 946631, 470822, 781384, 470608, 470816, 470755, 470739, 
608437, 416723, 325538, 473574, 332809, 332807, 360151, 362772, 382220, 331131, 
359960, 360417, 470662, 362776, 363167, 946501, 773599, 332760, 470644, 360098, 
562630, 331584,  334178, 334182, 334185, 334188, 334191, 334195, 334197, 736380, 
370319, 633248, 333633, 333637, 333638, 333641, 331602, 989662, 351626, 325816, 
333714, 886605, 334170, 1028922, 821381, 332403, 401505, 674770, 716285, 716287, 
1001625, 931001, 333911, 333916, 333920, 333923, 333931, 628118, 332361, 332365, 
333861, 333864, 333892, 335528, 333894, 333882, 333876, 336622,  343309, 343006, 
645910, 956691, 333856, 779386, 333846, 683140, 332453, 332445, 867507, 332501, 
332504, 332386, 332376, 730258, 666965, 664140, 334203, 334207, 334205,  332603, 
332423, 332427, 823614, 346740, 415494, 346743, 470891, 332825, 348090, 334151, 
736722, 331977, 738891, 332002, 331990, 825959, 722500, 813242, 334106, 343071, 
342569, 331981, 332437, 332439, 334978, 334980, 334983, 334172, 565493, 518574, 
1061879, 589658, 331056, 385020, 418623, 333333, 518535, 333334, 995474, 511514, 
943773, 382236, 354277, 329813, 334292, 334287, 334284, 389201, 359922, 334274, 
334271, 1026166, 334268, 334263, 332802, 950257, 335096, 325177, 419916, 404775, 
568004, 331661, 331659, 325756, 325758, 1073567, 384475, 674648, 383593, 382113, 
378096, 427668, 382248, 973615, 324066, 331689, 931232, 323660, 321572, 331649, 
331740, 331746, 331754, 776559, 331758, 656380, 1068108, 332996, 332999, 958869, 
618652, 562775, 816260, 979288, 325669, 325664, 325668, 325588, 883428, 333650, 
825579, 825578, 325675, 325688, 633228, 741363, 920845, 325765, 376857, 1067680, 
377095, 377114, 376498, 376657, 376880, 376718, 597588, 331763, 1043756, 325784, 
325788, 332779, 332586, 331048, 331598, 401032, 331587, 331589, 334168, 509139, 
538313, 334164, 332788, 968055, 328919, 328921, 328937, 328868, 328876, 880529, 
325290, 331344, 325772, 325827, 325831, 325835, 325836, 325840, 325844, 328793, 
328797, 328799, 328807, 328810, 328812, 328813, 332900, 331540, 324040, 324041, 
1047777, 837766, 1038559, 407856, 633548, 796618, 536416, 432790, 784055, 982206, 
816243, 331328, 554665, 585216, 554659, 331605, 331608, 331613, 325785, 325752, 
325750, 628816, 823317, 822959, 823285, 823299, 865042, 864968, 865048, 867719, 
870526, 870538, 333668, 333672, 333742, 333676, 562255, 645475, 661459, 592224, 
589562, 339829, 347272, 1029659, 1044119, 801866, 1047476, 331361, 331363, 331354, 
853984, 918176, 334187, 916478, 334184, 334196, 334180, 334174, 334204, 334217, 
926007, 331515, 333947, 386520, 334049, 334047, 428359, 332776, 1047749, 672132, 
331408, 331403, 716507, 331399, 331351, 331364, 564843, 331383, 331389, 331380, 
331377, 1029417, 705524, 407622, 443218, 418844, 418845, 418846, 417143, 417159, 
417151, 417164,  513865, 513870, 332764, 331382, 331378, 656562, 392458, 355611, 
325704, 325701, 349378, 976498, 332785, 783835, 332789, 334145, 376777, 384408, 
376571, 378013, 958146, 334103, 331134, 325706, 334090,  992407, 331708, 1071202, 
840417, 347396, 347190, 347169, 347192, 429036, 1034744, 334924, 325509, 465410, 
983244, 402867, 334035, 331651, 825722, 333952, 880967, 933240, 933246, 1031856, 
1031906, 333737, 470827, 585186, 585185, 573114, 325661, 325659, 631429, 325292, 
325761, 918081, 393942, 898757, 373364, 415724, 373378, 373384, 1028943, 894124, 
580081, 328697, 331761, 328857, 328858, 968537, 331137, 328840, 328843, 328845, 
328832, 331307, 864987, 843588, 331553, 331555, 331558, 331561, 881149, 331565, 
331566, 325731, 331223, 331202, 331239, 354798, 331193, 331210, 331147, 331152, 
415693, 741062, 415858,  331580, 418054, 331324, 331322, 331327, 331338, 331349, 
331347, 331345, 331368, 325728, 331497, 425790, 382460, 864617, 1004011, 1017367, 
332995
]
    ##### API GET config
    # Pro32 Api URL
url='https://api.pro32connect.ru/v1/'
request='agents/info'
requested_data='&agent_id='
data='agent_id'
    # API KEY
key_prefix ='?apikey='
key=str(config.api_key)

    # make CSV file and write headers
f = open('result_log.csv', 'w', encoding='utf-8')
headers_csv = 'name;cpu;os_name;hdd_model;hdd_size;hdd_free_disk_name;hdd_free_space;ram_size;ram_aviable;last_online'
print(headers_csv, file=f)

# for each client log a .json file
for i in agents:
    data = str(i)
    full_request= url+request+key_prefix+key+requested_data+data
    
        # get a text version of the response
    response = requests.get(full_request)
        # get a json version uf the response
    response_json = response.json()
    
        # json parsing for:
          # name
          # cpu
          # os_name
          # hdd_model
          # hdd_size
          # hdd_free_disk_name
          # hdd_free_space
          # ram_size
          # ram_aviable
          # last_online
    device_info = response_json['data']
    name = device_info.get('name') if device_info else None
    hardware_info = device_info.get('hardware', {}) if device_info else None
    cpu = hardware_info.get('CPU') if hardware_info else None
    os_name = hardware_info.get('OSName') if hardware_info else None
    hdd_info = hardware_info.get('HDD', [{}]) if hardware_info else None
    hdd_model = hdd_info[0].get('Model') if hdd_info else None
        # gets total space of the disk and divides by 1000 and not 1024,
        # WHY IDK, but seems like a better choice
    hdd_size = str((float(hdd_info[0].get('Size'))/1000))+str(' GB') if hdd_info else None
    hdd_free_info = hardware_info.get('LogicalDisks', [{}]) if hardware_info else None
        # just gets the logical name of the disk ex.: "C:\"
    hdd_free_disk_name = hdd_free_info[0].get('Disk') if hdd_free_info else None
    hdd_free_space = str((float(hdd_free_info[0].get('FreeSpace'))/1024))+str(' GB') if hdd_free_info else None
    ram_info = hardware_info.get('RAMBanks', [{}]) if hardware_info else None
    ram_size = str(float((ram_info[0].get('Capacity')/1024)))+str(' GB') if ram_info else None
    ram_aviable = str(float(hardware_info.get('RAMPhysAvail')/1024))+str(' GB') if hardware_info else None
    last_online_unix = device_info.get('last_time') if device_info else None
    last_online = datetime.fromtimestamp(last_online_unix).strftime('%d-%m-%Y %H:%M') if last_online_unix else None
    
        # would be great to form a matrix output with ';' ceparator and get a csv final output
        # but now i will just print a simple text with the separator
    final_result =(str(name)+';'+str(cpu)+';'+str(os_name)+';'
    +str(hdd_model)+';'+str(hdd_size)+';'+str(hdd_free_disk_name)+';'
    +str(hdd_free_space)+';'+str(ram_size) +';'+str(ram_aviable) +';'
    +str(last_online)+';'
    )
  
         # append output to file
    f = open('result_log.csv', 'a', encoding='utf-8')
    print(final_result, file=f)



# inline command
# add api_key @ the end 
# https://api.pro32connect.ru/v1/agents/info?agent_id=511514&X-Api-Key=

##########################
#### Thank 4 watching ####
####     RanXerox     ####
##########################